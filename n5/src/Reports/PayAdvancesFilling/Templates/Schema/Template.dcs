<?xml version="1.0" encoding="UTF-8"?>
<DataCompositionSchema xmlns="http://v8.1c.ru/8.1/data-composition-system/schema" xmlns:dcscom="http://v8.1c.ru/8.1/data-composition-system/common" xmlns:dcscor="http://v8.1c.ru/8.1/data-composition-system/core" xmlns:dcsset="http://v8.1c.ru/8.1/data-composition-system/settings" xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:v8ui="http://v8.1c.ru/8.1/data/ui" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dataSource>
		<name>DataSource1</name>
		<dataSourceType>Local</dataSourceType>
	</dataSource>
	<dataSet xsi:type="DataSetQuery">
		<name>DataSet1</name>
		<field xsi:type="DataSetFieldField">
			<dataPath>Employee</dataPath>
			<field>Employee</field>
			<title xsi:type="v8:LocalStringType">
				<v8:item>
					<v8:lang>en</v8:lang>
					<v8:content>Employee</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ru</v8:lang>
					<v8:content>Сотрудник</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ro</v8:lang>
					<v8:content>Angajat</v8:content>
				</v8:item>
			</title>
			<role>
				<dcscom:dimension>true</dcscom:dimension>
			</role>
			<valueType>
				<v8:Type xmlns:d5p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d5p1:CatalogRef.Individuals</v8:Type>
			</valueType>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Company</dataPath>
			<field>Company</field>
			<title xsi:type="v8:LocalStringType">
				<v8:item>
					<v8:lang>en</v8:lang>
					<v8:content>Company</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ru</v8:lang>
					<v8:content>Компания</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ro</v8:lang>
					<v8:content>Companie</v8:content>
				</v8:item>
			</title>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Compensation</dataPath>
			<field>Compensation</field>
			<role>
				<dcscom:dimension>true</dcscom:dimension>
			</role>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Edit</dataPath>
			<field>Edit</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Amount</dataPath>
			<field>Amount</field>
			<title xsi:type="v8:LocalStringType">
				<v8:item>
					<v8:lang>en</v8:lang>
					<v8:content>Amount</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ru</v8:lang>
					<v8:content>Сумма</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ro</v8:lang>
					<v8:content>Suma</v8:content>
				</v8:item>
			</title>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Account</dataPath>
			<field>Account</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Position</dataPath>
			<field>Position</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Schedule</dataPath>
			<field>Schedule</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Department</dataPath>
			<field>Department</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Result</dataPath>
			<field>Result</field>
			<title xsi:type="v8:LocalStringType">
				<v8:item>
					<v8:lang>en</v8:lang>
					<v8:content>Result</v8:content>
				</v8:item>
			</title>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>InHand</dataPath>
			<field>InHand</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Individual</dataPath>
			<field>Individual</field>
		</field>
		<dataSource>DataSource1</dataSource>
		<query>// Employees
select Employees.Employee as Employee
into Employees
from InformationRegister.Employees.SliceLast ( &amp;PaymentDate,
	not ( &amp;Calculating or &amp;TaxesOnly )
	{Employee.Individual.* as Employee, Employee.Company.* as Company} ) as Employees
where Employees.Hired
and not ( &amp;Calculating or &amp;TaxesOnly )
index by Employee
;
// Personnel
select Personnel.Employee as Employee, Personnel.Department as Department,
	Personnel.Position as Position, Personnel.Schedule as Schedule, Personnel.Expenses as Expenses
into Personnel
from InformationRegister.Personnel.SliceLast ( &amp;PaymentDate, Employee in ( select distinct Employee from Employees ) ) as Personnel
{where Department.* as Department, Position.* as Position, Schedule.* as Schedule}
;
// Compensations
select Compensations.Edit as Edit, Compensations.Employee as Employee, Compensations.Individual as Individual,
	Compensations.Compensation as Compensation, Compensations.InHand as InHand, Compensations.Amount as Amount,
	Compensations.Result as Result, Compensations.Account as Account, recordautonumber () as Key
into ActualCompensations
from (
	select Compensations.Edit as Edit, Compensations.Employee as Employee, Compensations.Individual as Individual,
		Compensations.Compensation as Compensation, Compensations.InHand as InHand, Compensations.Amount as Amount,
		Compensations.Result as Result, Compensations.Account as Account
	from Document.PayAdvances.Compensations as Compensations
	where &amp;Calculating
	{where Compensations.Ref = &amp;CalculatingDocument and &amp;CalculatingDocument &lt;&gt; value ( Document.PayAdvances.EmptyRef )}
	union all
	select false, Rates.Employee, Rates.Employee.Individual, Rates.Compensation, Rates.InHand,
		cast (
			( Rates.Rate * isnull ( ExchangeRates.Rate, 1 ) / isnull ( ExchangeRates.Factor, 1 ) ) / 100 * &amp;Percent
		as Number ( 15, 2 ) ), 0, Rates.Compensation.Account
	from InformationRegister.EmployeeRates.SliceLast ( &amp;PaymentDate,
		Employee in ( select distinct Employee from Personnel )
		and Compensation.Method in (
			value ( Enum.Calculations.FixedAmount ),
			value ( Enum.Calculations.MonthlyRate )
		)
		{Compensation.*} ) as Rates
		//
		// ExchangeRates
		//
		left join InformationRegister.ExchangeRates.SliceLast ( &amp;PaymentDate ) as ExchangeRates
		on ExchangeRates.Currency = Rates.Currency
	where Rates.Rate &lt;&gt; 0
	and Rates.Actual
) as Compensations
;
// ActualCompensations
select Compensations.Employee as Employee, Compensations.Individual as Individual,
	Compensations.Compensation as Compensation, Compensations.InHand as InHand,
	Compensations.Edit as Edit, sum ( Compensations.Amount ) as Amount
into CompensationsInHand
from ActualCompensations as Compensations
where Compensations.Employee in (
	select distinct Compensations.Employee
	from ActualCompensations as Compensations
	where Compensations.InHand
)
and not &amp;TaxesOnly
group by Compensations.Employee, Compensations.Individual, Compensations.Compensation,
	Compensations.InHand, Compensations.Edit
;
// SelectedEmployees
select distinct Compensations.Employee as Employee
into SelectedEmployees
from ActualCompensations as Compensations
index by Employee
;
// PaymentCalendar
select Period as Period
into PaymentCalendar
from (
	select &amp;YearStart as Period
	union all
	select dateadd ( &amp;YearStart, month, 1 )
	union all
	select dateadd ( &amp;YearStart, month, 2 )
	union all
	select dateadd ( &amp;YearStart, month, 3 )
	union all
	select dateadd ( &amp;YearStart, month, 4 )
	union all
	select dateadd ( &amp;YearStart, month, 5 )
	union all
	select dateadd ( &amp;YearStart, month, 6 )
	union all
	select dateadd ( &amp;YearStart, month, 7 )
	union all
	select dateadd ( &amp;YearStart, month, 8 )
	union all
	select dateadd ( &amp;YearStart, month, 9 )
	union all
	select dateadd ( &amp;YearStart, month, 10 )
	union all
	select dateadd ( &amp;YearStart, month, 11 )
	) as Calendar
where Calendar.Period between &amp;YearStart and &amp;PaymentDate
index by Period
;
// DeductionRates
select &amp;YearStart as Period, Deductions.Deduction as Deduction, Deductions.Rate as Rate
into DeductionRates
from InformationRegister.DeductionRates.SliceLast ( &amp;YearStart ) as Deductions
union all
select Deductions.Period, Deductions.Deduction, Deductions.Rate
from InformationRegister.DeductionRates as Deductions
where Deductions.Period &gt; &amp;YearStart and Deductions.Period &lt;= &amp;PaymentDate
index by Period
;
// DeductionsList
select Calendar.Period as Period, Deductions.Deduction as Deduction, Deductions.Rate as Rate
into DeductionsList
from PaymentCalendar as Calendar
	//
	// DeductionPeriods
	//
	join (
		select Calendar.Period as Period, Deductions.Deduction as Deduction, max ( Deductions.Period ) as DeductionPeriod
		from PaymentCalendar as Calendar
			//
			// Deductions
			//
			left join DeductionRates as Deductions
			on Deductions.Period &lt;= Calendar.Period
		group by Calendar.Period, Deductions.Deduction
	) as DeductionPeriods
	on DeductionPeriods.Period = Calendar.Period
	//
	// DeductionRate
	//
	join DeductionRates as Deductions
	on Deductions.Deduction = DeductionPeriods.Deduction
	and Deductions.Period = DeductionPeriods.DeductionPeriod
index by Period, Deduction
;
// EmployeeDeductions
select &amp;YearStart as Period, true as Use, Deductions.Employee.Individual as Employee, Deductions.Deduction as Deduction
into EmployeeDeductions
from InformationRegister.Deductions.SliceLast ( &amp;YearStart, Employee in ( select Employee from SelectedEmployees ) ) as Deductions
where Deductions.Use
union all
select Deductions.Period, Deductions.Use, Deductions.Employee.Individual, Deductions.Deduction
from InformationRegister.Deductions as Deductions
where Employee.Individual in ( select distinct Individual from ActualCompensations )
and Deductions.Period &gt; &amp;YearStart and Deductions.Period &lt;= &amp;PaymentDate
index by Period, Employee
;
// EmployeeDeductionPeriods
select Calendar.Period as Period, Deductions.Employee as Employee, Deductions.Deduction as Deduction,
	max ( Deductions.Period ) as DeductionPeriod
into EmployeeDeductionPeriods
from PaymentCalendar as Calendar
	//
	// Deductions
	//
	left join EmployeeDeductions as Deductions
	on Deductions.Period &lt;= Calendar.Period
group by Calendar.Period, Deductions.Employee, Deductions.Deduction
index by Period, Employee
;
// Deductions
select Deductions.Employee as Employee, sum ( Deductions.Amount ) as Amount
into Deductions
from (
	select Deductions.Employee as Employee, case when Deductions.Use then DeductionsList.Rate / 12 else 0 end as Amount
	from PaymentCalendar as Calendar
		//
		// DeductionPeriods
		//
		join EmployeeDeductionPeriods as DeductionPeriods
		on DeductionPeriods.Period = Calendar.Period
		//
		// Deductions
		//
		join EmployeeDeductions as Deductions
		on Deductions.Period = DeductionPeriods.DeductionPeriod
		and Deductions.Employee = DeductionPeriods.Employee
		and Deductions.Deduction = DeductionPeriods.Deduction
		//
		// DeductionsList
		//
		join DeductionsList as DeductionsList
		on DeductionsList.Period = Calendar.Period
		and DeductionsList.Deduction = Deductions.Deduction
	union all
	select Unused.Employee.Individual, Unused.Amount
	from InformationRegister.UnusedDeductions as Unused
	where Unused.Employee in ( select Employee from SelectedEmployees )
	and Unused.Year = &amp;YearStart
	union all
	select AppliedDeductions.Employee, - AppliedDeductions.Deductions
	from Document.PayEmployees.Taxes as AppliedDeductions
	where AppliedDeductions.Ref.Date between &amp;YearStart and &amp;PaymentDate
	and AppliedDeductions.Ref.Posted
	and AppliedDeductions.Deductions &lt;&gt; 0
	and AppliedDeductions.Employee in ( select distinct Individual from ActualCompensations )
	{where AppliedDeductions.Ref.Company.* as Company}
	union all
	select AppliedDeductions.Employee, - AppliedDeductions.Deductions
	from Document.PayAdvances.Taxes as AppliedDeductions
	where AppliedDeductions.Ref.Date between &amp;YearStart and &amp;PaymentDate
	and AppliedDeductions.Ref.Posted
	and AppliedDeductions.Deductions &lt;&gt; 0
	and AppliedDeductions.Employee in ( select distinct Individual from ActualCompensations )
	{where AppliedDeductions.Ref.Company.* as Company}
	union all
	select AppliedDeductions.Individual, - AppliedDeductions.Deductions
	from Document.PayrollBalances.Employees as AppliedDeductions
	where AppliedDeductions.Ref.Date between &amp;YearStart and &amp;PaymentDate
	and AppliedDeductions.Ref.Posted
	and AppliedDeductions.Deductions &lt;&gt; 0
	and AppliedDeductions.Employee in ( select Employee from SelectedEmployees )
	{where AppliedDeductions.Ref.Company.* as Company}
	) as Deductions
group by Deductions.Employee
having sum ( Deductions.Amount ) &gt; 0
index by Employee
;
// TaxRates
select Rates.Tax as Tax, Rates.Rate as Rate
into TaxRates
from InformationRegister.PayrollTaxes.SliceLast ( &amp;PaymentDate,
	Tax.Net
	or Tax.Method in (
		value ( Enum.Calculations.MedicalInsurance ),
		value ( Enum.Calculations.IncomeTax ) ) ) as Rates
where Rates.Use
;
// MedicalGrossSalary
select Compensations.Individual as Employee, Compensations.Compensation as Compensation, Compensations.Edit as Edit,
	Compensations.Amount / 100 * Rates.Rate as Result
into MedicalGrossSalary
from CompensationsInHand as Compensations
	//
	// Taxes
	//
	join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
	on Taxes.CalculationType = Compensations.Compensation
	and not Taxes.Ref.DeletionMark
	and Taxes.Ref.Method = value ( Enum.Calculations.MedicalInsurance )
	//
	// Rates
	//
	join TaxRates as Rates
	on Rates.Tax = Taxes.Ref
where not Compensations.InHand
;
// IncomeTaxCompensations
select Base.Employee as Employee, Base.Compensation as Compensation, Base.Edit as Edit,
	sum ( Base.Amount ) as Amount, max ( Rates.Rate ) as Rate, recordautonumber () as Key
into IncomeTaxCompensations
from (
	select Base.Employee as Employee, Base.Compensation as Compensation, Base.Edit as Edit, sum ( Base.Amount ) as Amount
	from (
		select Compensations.Individual as Employee, Compensations.Compensation as Compensation, Compensations.Edit as Edit,
			Compensations.Amount as Amount
		from CompensationsInHand as Compensations
		where not Compensations.InHand
		union all
		select Medical.Employee, Medical.Compensation, Medical.Edit, - Medical.Result
		from MedicalGrossSalary as Medical
	) as Base
	group by Base.Employee, Base.Compensation, Base.Edit
) as Base
	//
	// Taxes
	//
	join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
	on Taxes.CalculationType = Base.Compensation
	and not Taxes.Ref.DeletionMark
	and Taxes.Ref.Method = value ( Enum.Calculations.IncomeTax )
	//
	// Rates
	//
	join TaxRates as Rates
	on Rates.Tax = Taxes.Ref
group by Base.Employee, Base.Compensation, Base.Edit
;
// BiggestCompensations
select Base.Employee as Employee, max ( Base.Key ) as Key
into BiggestCompensations
from IncomeTaxCompensations as Base
	//
	// Only max
	//
	join (
		select BiggestBase.Employee as Employee, max ( BiggestBase.Amount ) as Amount
		from IncomeTaxCompensations as BiggestBase
		group by BiggestBase.Employee
	) as BiggestBase
	on BiggestBase.Employee = Base.Employee
group by Base.Employee
;
// IncomeTaxGrossSalary
select Compensations.Employee as Employee, Compensations.Compensation as Compensation, Compensations.Edit as Edit,
	( Compensations.Amount - isnull ( Deductions.Amount, 0 ) ) / 100 * Compensations.Rate as Result
into IncomeTaxGrossSalary
from IncomeTaxCompensations as Compensations
	//
	// Filter by biggest
	//
	left join BiggestCompensations as BiggestCompensations
	on BiggestCompensations.Key = Compensations.Key
	//
	// Deductions
	//
	left join Deductions as Deductions
	on Deductions.Employee = Compensations.Employee
	and BiggestCompensations.Key is not null
;
// OtherTaxesGrossSalary
select Base.Employee as Employee, Base.Compensation as Compensation, Base.Edit as Edit,
	sum ( Base.Amount / 100 * Rates.Rate ) as Result
into OtherTaxesGrossSalary
from (                                                                                         
	select Base.Employee as Employee, Base.Compensation as Compensation, Base.Edit as Edit, sum ( Base.Amount ) as Amount
	from (
		select Compensations.Individual as Employee, Compensations.Compensation as Compensation, Compensations.Edit as Edit,
			Compensations.Amount as Amount
		from CompensationsInHand as Compensations
		where not Compensations.InHand
		union all
		select Medical.Employee, Medical.Compensation, Medical.Edit, - Medical.Result
		from MedicalGrossSalary as Medical
		union all
		select IncomeTax.Employee, IncomeTax.Compensation, IncomeTax.Edit, - IncomeTax.Result
		from IncomeTaxGrossSalary as IncomeTax
	) as Base
	group by Base.Employee, Base.Compensation, Base.Edit
) as Base
	//
	// Taxes
	//
	join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
	on Taxes.CalculationType = Base.Compensation
	and not Taxes.Ref.DeletionMark
	and not Taxes.Ref.Method in ( value ( Enum.Calculations.Percent ), value ( Enum.Calculations.FixedAmount ) )
	and Taxes.Ref.Net
	//
	// Rates
	//
	join TaxRates as Rates
	on Rates.Tax = Taxes.Ref
group by Base.Employee, Base.Compensation, Base.Edit
;
// NetWithoutDeductions
select NetSalary.Individual as Individual, NetSalary.Compensation as Compensation, NetSalary.Edit as Edit, sum ( NetSalary.Amount ) as p,
	sum ( isnull ( OtherTaxesRates.Rate, 0 ) ) / 100 as k, sum ( isnull ( OtherTaxesAmountRates.Rate, 0 ) ) as s,
	sum ( isnull ( IncomeTaxRates.Rate, 0 ) ) / 100 as i, sum ( isnull ( MedicalTaxRates.Rate, 0 ) ) / 100 as m
	, recordautonumber () as Row
into NetWithoutDeductions
from (
	select Compensations.Individual as Individual, Compensations.Compensation as Compensation, Compensations.Edit as Edit,
		sum ( Compensations.Amount ) as Amount
	from (
		select Compensations.Individual as Individual, Compensations.Compensation as Compensation, Compensations.Edit as Edit,
			Compensations.Amount as Amount
		from CompensationsInHand as Compensations
		union all
		select Medical.Employee, Medical.Compensation, Medical.Edit, - Medical.Result
		from MedicalGrossSalary as Medical
		union all
		select IncomeTax.Employee, IncomeTax.Compensation, IncomeTax.Edit, - IncomeTax.Result
		from IncomeTaxGrossSalary as IncomeTax
		union all
		select OtherTaxes.Employee, OtherTaxes.Compensation, OtherTaxes.Edit, - OtherTaxes.Result
		from OtherTaxesGrossSalary as OtherTaxes
	) as Compensations
	group by Compensations.Individual, Compensations.Compensation, Compensations.Edit
	having sum ( Compensations.Amount ) &gt; 0
) as NetSalary
	//
	// OtherTaxesPercent
	//
	left join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as OtherTaxes
	on OtherTaxes.CalculationType = NetSalary.Compensation
	and not OtherTaxes.Ref.DeletionMark
	and OtherTaxes.Ref.Method = value ( Enum.Calculations.Percent )
	and OtherTaxes.Ref.Net
	//
	// OtherTaxesRates
	//
	left join TaxRates as OtherTaxesRates
	on OtherTaxesRates.Tax = OtherTaxes.Ref
	//
	// OtherTaxesAmount
	//
	left join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as OtherTaxesAmount
	on OtherTaxesAmount.CalculationType = NetSalary.Compensation
	and not OtherTaxesAmount.Ref.DeletionMark
	and OtherTaxesAmount.Ref.Method = value ( Enum.Calculations.FixedAmount )
	and OtherTaxesAmount.Ref.Net
	//
	// OtherTaxesAmountRates
	//
	left join TaxRates as OtherTaxesAmountRates
	on OtherTaxesAmountRates.Tax = OtherTaxesAmount.Ref
	// 
	// IncomeTax
	//                                                              
	left join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as IncomeTax
	on IncomeTax.CalculationType = NetSalary.Compensation
	and not IncomeTax.Ref.DeletionMark
	and IncomeTax.Ref.Method = value ( Enum.Calculations.IncomeTax )
	// 
	// IncomeTaxRates
	//
	left join TaxRates as IncomeTaxRates
	on IncomeTaxRates.Tax = IncomeTax.Ref
	// 
	// Medical
	//                                                              
	left join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as MedicalTax
	on MedicalTax.CalculationType = NetSalary.Compensation
	and not MedicalTax.Ref.DeletionMark
	and MedicalTax.Ref.Method = value ( Enum.Calculations.MedicalInsurance )
	// 
	// MedicalTaxRates
	//
	left join TaxRates as MedicalTaxRates
	on MedicalTaxRates.Tax = MedicalTax.Ref
group by NetSalary.Individual, NetSalary.Compensation, NetSalary.Edit
;
// NetSalary
select NetSalary.Individual as Individual, NetSalary.Compensation as Compensation, NetSalary.Edit as Edit,
	NetSalary.p as p, NetSalary.k as k, NetSalary.s as s, NetSalary.i as i, NetSalary.m as m,
	isnull ( Deductions.Amount, 0 ) as d
into NetSalary
from NetWithoutDeductions as NetSalary
	//
	// Max Compensation
	//
	left join (
		select min ( Salary.Row ) as Row
		from NetWithoutDeductions as Salary
			//
			// Max amount
			//
			join (
				select Salary.Individual as Individual, max ( Salary.p ) as p
				from NetWithoutDeductions as Salary
				where Salary.i &lt;&gt; 0
				group by Salary.Individual
			) MaxAmount
			on MaxAmount.Individual = Salary.Individual
			and MaxAmount.p = Salary.p
		where Salary.i &lt;&gt; 0
		group by Salary.Individual
	) as MaxCompensations
	on MaxCompensations.Row = NetSalary.Row
	//
	// Deductions
	//
	left join Deductions as Deductions
	on Deductions.Employee = NetSalary.Individual
	and MaxCompensations.Row = NetSalary.Row
;
// GrossSalary
select NetSalary.Individual as Individual, NetSalary.Compensation as Compensation,
	NetSalary.Edit as Edit,
	case when ( -k + 1 ) = 0 or ( -i + 1 ) = 0 or ( -m + 1 ) = 0 then 0
	else
		// n = p; // p = initial net amount
		// n = n + s; // s = tax (fixed amount) from net amount
		// n = Round ( n / ( -k + 1 ), 2 ); // k = tax (percent) from net amount
		// n = Round ( ( n - i * d ) / ( -i + 1 ), 2 ); // i = income tax, d = deductions
		// n = Round ( n / ( -m + 1 ), 2 ); // m = medicine (percent)
		cast ( ( cast ( ( ( cast ( ( p + s ) / ( -k + 1 ) as Number ( 15, 2 ) ) ) - i * d ) / ( -i + 1 ) as Number ( 15, 2 ) ) ) / ( -m + 1 ) as Number ( 15, 2 ) )
	end as Amount
into GrossSalary
from NetSalary as NetSalary
;
// DistributionBase
select Compensations.Individual as Individual, Compensations.Compensation as Compensation,
	sum ( Compensations.Amount ) as Amount
into DistributionBase
from CompensationsInHand as Compensations
group by Compensations.Individual, Compensations.Compensation
;
// Distributed
select Compensations.Key as Key, Compensations.Employee as Employee, Compensations.Individual as Individual,
	Compensations.Compensation as Compensation,
	case when Compensations.InHand then
		cast ( Compensations.Amount * ( GrossSalary.Amount / DistributionBase.Amount ) as Number ( 15, 2 ) )
	else Compensations.Amount
	end as AccountingResult
into Distributed
from ActualCompensations as Compensations
	//
	// DistributionBase
	//
	join DistributionBase as DistributionBase
	on DistributionBase.Individual = Compensations.Individual
	and DistributionBase.Compensation = Compensations.Compensation
	//
	// GrossSalary
	//
	join GrossSalary as GrossSalary
	on GrossSalary.Individual = Compensations.Individual
	and GrossSalary.Compensation = Compensations.Compensation
where not Compensations.Edit
;
// ReversedSalary
select ReversedSalary.Key as Key, sum ( ReversedSalary.Result ) as Result
into ReversedSalary
from (
	select Distributed.Key as Key, Distributed.AccountingResult as Result
	from Distributed as Distributed
	union all
	select Compensations.Key, Discrepancy.Amount
	from (                                                        	
		select Discrepancy.Individual as Individual, Discrepancy.Compensation as Compensation, sum ( Discrepancy.Amount ) as Amount
		from (                                          	
			select GrossSalary.Individual as Individual, GrossSalary.Compensation as Compensation, GrossSalary.Amount as Amount
			from GrossSalary as GrossSalary
			where not GrossSalary.Edit
			union all
			select Distributed.Individual, Distributed.Compensation, - sum ( Distributed.AccountingResult )
			from Distributed as Distributed
			group by Distributed.Individual, Distributed.Compensation
		) as Discrepancy
		group by Discrepancy.Individual, Discrepancy.Compensation
		having sum ( Discrepancy.Amount ) &lt;&gt; 0
	) as Discrepancy
		//
		// Put difference to biggest compensation
		//
		join (
			select Compensations.Key as Key, Compensations.Individual as Individual, Compensations.Compensation as Compensation
			from ActualCompensations as Compensations
				//
				// Filter by max row
				//
				join (
					select Compensations.Individual as Individual, Compensations.Compensation as Compensation, max ( Compensations.Key ) as Key
					from ActualCompensations as Compensations
						//
						// MaxCompensations
						//
						join (
							select Compensations.Individual as Individual, Compensations.Compensation as Compensation,
								max ( Compensations.Amount ) as Amount
							from ActualCompensations as Compensations
							where Compensations.InHand
							and not Compensations.Edit
							group by Compensations.Individual, Compensations.Compensation
						) as MaxCompensations
						on MaxCompensations.Individual = Compensations.Individual
						and MaxCompensations.Compensation = Compensations.Compensation
						and MaxCompensations.Amount = Compensations.Amount
					where not Compensations.Edit
					group by Compensations.Individual, Compensations.Compensation
				) as MaxCompensations
				on MaxCompensations.Key = Compensations.Key
			where not Compensations.Edit
		) as Compensations
		on Compensations.Individual = Discrepancy.Individual
		and Compensations.Compensation = Discrepancy.Compensation
) as ReversedSalary
group by ReversedSalary.Key
;
// Compensations
select Compensations.Edit as Edit, Compensations.Employee as Employee, Compensations.Individual as Individual,
	Compensations.Compensation as Compensation,
	case when Compensations.Edit or &amp;TaxesOnly then Compensations.Result
		else isnull ( Reversed.Result, Compensations.Amount )
	end as Amount,
	Compensations.Amount as CompensationAmount, Compensations.Account as Account, Compensations.InHand as InHand
into AllCompensations
from ActualCompensations as Compensations
	//
	// Reversed
	//
	left join ReversedSalary as Reversed
	on Reversed.Key = Compensations.Key
index by Individual
;
// ChangedTaxes
select Changes.Employee as Employee, Changes.Compensation as Compensation, Changes.Tax as Tax,
	Changes.Account as Account, Changes.Method as Method, Changes.Base as Base, Changes.Result as Result,
	Changes.Deductions as Deductions
into ChangedTaxes
from Document.PayAdvances.Taxes as Changes
where Changes.Ref = &amp;Ref
and Changes.Edit
;
// Medical
select false as Edit, Based.Employee as Employee, Based.Compensation as Compensation, Based.Tax as Tax,
	Based.Account as Account, Based.Amount as Base, Based.Amount / 100 * Rates.Rate as Result
into Medical
from (
	select Compensations.Individual as Employee, Compensations.Compensation as Compensation, Taxes.Ref as Tax,
		Taxes.Ref.Account as Account, sum ( Compensations.Amount ) as Amount
	from AllCompensations as Compensations
		//
		// Taxes
		//
		join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
		on Taxes.CalculationType = Compensations.Compensation
		and not Taxes.Ref.DeletionMark
		// There are fixed set of accounts which should be calculated
		// at this point in time (actual Payment)
		and Taxes.Ref.Method = value ( Enum.Calculations.MedicalInsurance )
	group by Compensations.Individual, Compensations.Compensation, Taxes.Ref
	) as Based
	//
	// Rates
	//
	join TaxRates as Rates
	on Rates.Tax = Based.Tax
	//
	// Exclude modified records
	//
	left join ChangedTaxes as Changes
	on Changes.Employee = Based.Employee
	and Changes.Compensation = Based.Compensation
	and Changes.Tax = Based.Tax
	and Changes.Account = Based.Account
where Changes.Employee is null
union all
select true, Changes.Employee, Changes.Compensation, Changes.Tax, Changes.Account, Changes.Base, Changes.Result
from ChangedTaxes as Changes
where Changes.Method = value ( Enum.Calculations.MedicalInsurance )
;
// IncomeTax
select false as Edit, IncomeTax.Employee as Employee, IncomeTax.Tax as Tax, IncomeTax.Tax.Account as Account,
	IncomeTax.Amount as Base, isnull ( EmployeeDeductions.Amount, 0 ) as Deductions,
	( IncomeTax.Amount - isnull ( EmployeeDeductions.Amount, 0 ) ) / 100 * IncomeTax.Rate as Result
into IncomeTax
from (
	select Base.Employee as Employee, sum ( Base.Amount ) as Amount, Taxes.Ref as Tax, max ( Rates.Rate ) as Rate
	from (
		select Compensations.Individual as Employee, Compensations.Compensation as Compensation, Compensations.Amount as Amount
		from AllCompensations as Compensations
		union all
		select Medical.Employee, Medical.Compensation, - Medical.Result
		from Medical as Medical
		) as Base
		//
		// Taxes
		//
		join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
		on Taxes.CalculationType = Base.Compensation
		and not Taxes.Ref.DeletionMark
		and Taxes.Ref.Method = value ( Enum.Calculations.IncomeTax )
		//
		// Rates
		//
		join TaxRates as Rates
		on Rates.Tax = Taxes.Ref
	group by Base.Employee, Taxes.Ref
	) as IncomeTax
	//
	// Deductions
	//
	left join Deductions as EmployeeDeductions
	on EmployeeDeductions.Employee = IncomeTax.Employee
	//
	// Exclude modified records
	//
	left join ChangedTaxes as Changes
	on Changes.Employee = IncomeTax.Employee
	and Changes.Tax = IncomeTax.Tax
	and Changes.Account = IncomeTax.Tax.Account
where Changes.Employee is null
union all
select true, Changes.Employee, Changes.Tax, Changes.Account, Changes.Base, Changes.Deductions, Changes.Result
from ChangedTaxes as Changes
where Changes.Method = value ( Enum.Calculations.IncomeTax )
;
// OtherDeductions
select false as Edit, Basis.Employee as Employee, Taxes.Ref as Tax, Taxes.Ref.Account as Account,
	Basis.Amount as Base,
	case Taxes.Ref.Method when value ( Enum.Calculations.Percent ) then Basis.Amount / 100 * Rates.Rate
	else Rates.Rate
	end as Result
into OtherDeductions
from (
	select Basis.Employee as Employee, sum ( Basis.Amount ) as Amount
	from (
		select Compensations.Individual as Employee, Compensations.Amount as Amount
		from AllCompensations as Compensations
		union all
		select Medical.Employee, - Medical.Result
		from Medical as Medical
		union all
		select IncomeTax.Employee, - IncomeTax.Result
		from IncomeTax as IncomeTax
	) as Basis
	group by Basis.Employee
	) as Basis
	//
	// Taxes
	//
	join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
	on Taxes.Ref.Net
	and not Taxes.Ref.DeletionMark
	and Taxes.Ref.Method in ( value ( Enum.Calculations.Percent ), value ( Enum.Calculations.FixedAmount ) )
	and Taxes.CalculationType in ( select distinct Compensation from AllCompensations )
	//
	// Rates
	//
	join TaxRates as Rates
	on Rates.Tax = Taxes.Ref
	//
	// Exclude modified records
	//
	left join ChangedTaxes as Changes
	on Changes.Employee = Basis.Employee
	and Changes.Tax = Taxes.Ref
	and Changes.Account = Taxes.Ref.Account
where Changes.Employee is null
union all
select true, Changes.Employee, Changes.Tax, Changes.Account, Changes.Base, Changes.Result
from ChangedTaxes as Changes
where Changes.Tax.Net
	and Changes.Method in ( value ( Enum.Calculations.Percent ), value ( Enum.Calculations.FixedAmount ) )
;
// Final selection: Taxes
select Taxes.Edit as Edit, Taxes.Employee as Employee, Taxes.Compensation as Compensation, Taxes.Tax as Tax,
	Taxes.Account as Account, Taxes.Base as Base, Taxes.Result as Result, Taxes.Deductions as Deductions,
	Taxes.Tax.Method as Method
from (
	select IncomeTax.Edit as Edit, IncomeTax.Employee as Employee, null as Compensation, IncomeTax.Tax as Tax,
		IncomeTax.Account as Account, IncomeTax.Base as Base, IncomeTax.Result as Result,
		IncomeTax.Deductions as Deductions
	from IncomeTax as IncomeTax
	union all
	select Medical.Edit, Medical.Employee, Medical.Compensation, Medical.Tax, Medical.Account,
		Medical.Base, Medical.Result, 0
	from Medical as Medical
	union all
	select OtherDeductions.Edit, OtherDeductions.Employee, null, OtherDeductions.Tax, OtherDeductions.Account,
		OtherDeductions.Base, OtherDeductions.Result, 0
	from OtherDeductions as OtherDeductions
	union all
	select true, Changes.Employee, Changes.Compensation, Changes.Tax, Changes.Account,
		Changes.Base, Changes.Result, Changes.Deductions
	from ChangedTaxes as Changes
		//
		// Exculde already included changes in Medical
		//
		left join Medical as Medical
		on Medical.Edit
		and Medical.Employee = Changes.Employee
		and Medical.Compensation = Changes.Compensation
		and Medical.Tax = Changes.Tax
		and Medical.Account = Changes.Account
		//
		// Exculde already included changes in IncomeTax
		//
		left join IncomeTax as IncomeTax
		on IncomeTax.Edit
		and IncomeTax.Employee = Changes.Employee
		and IncomeTax.Tax = Changes.Tax
		and IncomeTax.Account = Changes.Account
		//
		// Exculde already included changes in OtherDeductions
		//
		left join OtherDeductions as OtherDeductions
		on OtherDeductions.Edit
		and OtherDeductions.Employee = Changes.Employee
		and OtherDeductions.Tax = Changes.Tax
		and OtherDeductions.Account = Changes.Account
	where Medical.Edit is null
	and IncomeTax.Edit is null
	and OtherDeductions.Edit is null
	) as Taxes
order by Taxes.Employee.Description, Taxes.Employee.Code,
	case Taxes.Tax.Method
		when value ( Enum.Calculations.MedicalInsurance ) then 0
		when value ( Enum.Calculations.IncomeTax ) then 1
		else 2
	end
;
// Final selection: Compensations
select Compensations.Edit as Edit, Compensations.Employee as Employee, Compensations.Individual as Individual,
	Compensations.Compensation as Compensation, Compensations.Account as Account, Compensations.Amount as Result,
	Compensations.CompensationAmount as Amount, Compensations.InHand as InHand
{select Edit, Employee.*, Individual.*, Compensation.*, Account.*, Amount, Result, InHand}
from AllCompensations as Compensations
order by Compensations.Employee.Description, Compensations.Employee.Code,
	case Compensations.Compensation.Method
	 	when value ( Enum.Calculations.MonthlyRate ) then 0
		else 1
	end
</query>
		<autoFillFields>false</autoFillFields>
	</dataSet>
	<parameter>
		<name>Date</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>As of</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>По состоянию на</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>De la</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:CatalogRef.Calendar</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>false</useRestriction>
		<inputParameters>
			<dcscor:item>
				<dcscor:use>false</dcscor:use>
				<dcscor:parameter>EditFormat</dcscor:parameter>
				<dcscor:value xsi:type="v8:LocalStringType">
					<v8:item>
						<v8:lang>en</v8:lang>
						<v8:content>DLF=D</v8:content>
					</v8:item>
					<v8:item>
						<v8:lang>ru</v8:lang>
						<v8:content>DLF=D</v8:content>
					</v8:item>
					<v8:item>
						<v8:lang>ro</v8:lang>
						<v8:content>DLF=D</v8:content>
					</v8:item>
				</dcscor:value>
			</dcscor:item>
		</inputParameters>
		<denyIncompleteValues>true</denyIncompleteValues>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>Ref</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Ref</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Ref</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:DocumentRef.PayAdvances</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>true</useRestriction>
	</parameter>
	<parameter>
		<name>CalculationVariant</name>
		<title xsi:type="xs:string">Calculation variant</title>
		<valueType>
			<v8:Type>xs:decimal</v8:Type>
			<v8:NumberQualifiers>
				<v8:Digits>0</v8:Digits>
				<v8:FractionDigits>0</v8:FractionDigits>
				<v8:AllowedSign>Any</v8:AllowedSign>
			</v8:NumberQualifiers>
		</valueType>
		<value xsi:type="xs:decimal">0</value>
		<useRestriction>true</useRestriction>
		<availableAsField>false</availableAsField>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>Calculating</name>
		<title xsi:type="xs:string">Calculating</title>
		<valueType>
			<v8:Type>xs:boolean</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>true</useRestriction>
		<expression>case when &amp;CalculationVariant &lt;&gt; 1 then true else false end</expression>
		<availableAsField>false</availableAsField>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>TaxesOnly</name>
		<title xsi:type="xs:string">Taxes only</title>
		<valueType>
			<v8:Type>xs:boolean</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>true</useRestriction>
		<expression>case when &amp;CalculationVariant = 3 then true else false end</expression>
		<availableAsField>false</availableAsField>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>CalculatingDocument</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Calculating document</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:DocumentRef.PayAdvances</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>false</useRestriction>
	</parameter>
	<parameter>
		<name>YearStart</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Year start</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>true</useRestriction>
	</parameter>
	<parameter>
		<name>Percent</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Payment Percent</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>Процент выплаты</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Procentul de plată</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:decimal</v8:Type>
			<v8:NumberQualifiers>
				<v8:Digits>5</v8:Digits>
				<v8:FractionDigits>2</v8:FractionDigits>
				<v8:AllowedSign>Any</v8:AllowedSign>
			</v8:NumberQualifiers>
		</valueType>
		<value xsi:type="xs:decimal">0</value>
		<useRestriction>false</useRestriction>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>PaymentDate</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Payment date</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>true</useRestriction>
	</parameter>
	<settingsVariant>
		<dcsset:name>Default</dcsset:name>
		<dcsset:presentation xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>For Testing</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>Для проверок</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Pentru testare</v8:content>
			</v8:item>
		</dcsset:presentation>
		<dcsset:settings xmlns:style="http://v8.1c.ru/8.1/data/ui/style" xmlns:sys="http://v8.1c.ru/8.1/data/ui/fonts/system" xmlns:web="http://v8.1c.ru/8.1/data/ui/colors/web" xmlns:win="http://v8.1c.ru/8.1/data/ui/colors/windows">
			<dcsset:selection>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Employee</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Individual</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Compensation</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Account</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Amount</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Edit</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Result</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>InHand</dcsset:field>
				</dcsset:item>
			</dcsset:selection>
			<dcsset:filter>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Employee</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>5c381009-bce8-49d8-adfc-fd38b8d60507</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Department</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>a79c62ca-e10a-486b-a641-93f3ebc0237b</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Position</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>47ccdb38-fc42-48cc-8571-a41e47909a8c</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Schedule</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>1962b207-fd39-46c1-bbcf-a27f84a4e4c5</dcsset:userSettingID>
				</dcsset:item>
			</dcsset:filter>
			<dcsset:dataParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Date</dcscor:parameter>
					<dcscor:value xsi:nil="true"/>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:use>false</dcscor:use>
					<dcscor:parameter>Calculating</dcscor:parameter>
					<dcscor:value xsi:nil="true"/>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Percent</dcscor:parameter>
					<dcscor:value xsi:type="xs:decimal">50</dcscor:value>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>03d7e4a9-fe00-4e60-b6f6-b516ea57ddf6</dcsset:userSettingID>
				</dcscor:item>
			</dcsset:dataParameters>
			<dcsset:order>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee.Code</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Compensation</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
			</dcsset:order>
			<dcsset:outputParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>AppearanceTemplate</dcscor:parameter>
					<dcscor:value xsi:type="xs:string">Reports</dcscor:value>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Title</dcscor:parameter>
					<dcscor:value xsi:type="v8:LocalStringType">
						<v8:item>
							<v8:lang>en</v8:lang>
							<v8:content>Pay Advances</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Авансы по ЗП</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ro</v8:lang>
							<v8:content>Avansuri salariale</v8:content>
						</v8:item>
					</dcscor:value>
				</dcscor:item>
			</dcsset:outputParameters>
			<dcsset:item xsi:type="dcsset:StructureItemGroup">
				<dcsset:order>
					<dcsset:item xsi:type="dcsset:OrderItemAuto"/>
				</dcsset:order>
				<dcsset:selection>
					<dcsset:item xsi:type="dcsset:SelectedItemAuto"/>
				</dcsset:selection>
			</dcsset:item>
		</dcsset:settings>
	</settingsVariant>
	<settingsVariant>
		<dcsset:name>#Fill</dcsset:name>
		<dcsset:presentation xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Pay</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>Выплата</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Plată</v8:content>
			</v8:item>
		</dcsset:presentation>
		<dcsset:settings xmlns:style="http://v8.1c.ru/8.1/data/ui/style" xmlns:sys="http://v8.1c.ru/8.1/data/ui/fonts/system" xmlns:web="http://v8.1c.ru/8.1/data/ui/colors/web" xmlns:win="http://v8.1c.ru/8.1/data/ui/colors/windows">
			<dcsset:selection>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Account</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Compensation</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Employee</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Individual</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Edit</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Amount</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Result</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>InHand</dcsset:field>
				</dcsset:item>
			</dcsset:selection>
			<dcsset:filter>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Employee</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>5c381009-bce8-49d8-adfc-fd38b8d60507</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Department</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>a79c62ca-e10a-486b-a641-93f3ebc0237b</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Position</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>655aaa01-ec08-4c9d-9588-53a8b1f80dd9</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Schedule</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>808a85f1-d067-4153-bd6d-2c97d93a8474</dcsset:userSettingID>
				</dcsset:item>
			</dcsset:filter>
			<dcsset:dataParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:use>false</dcscor:use>
					<dcscor:parameter>Date</dcscor:parameter>
					<dcscor:value xsi:type="xs:dateTime">0001-01-01T00:00:00</dcscor:value>
					<dcsset:userSettingID>53f8c8a3-2c6b-44c2-a6ae-dddc89787f82</dcsset:userSettingID>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:use>false</dcscor:use>
					<dcscor:parameter>Calculating</dcscor:parameter>
					<dcscor:value xsi:nil="true"/>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Percent</dcscor:parameter>
					<dcscor:value xsi:type="xs:decimal">50</dcscor:value>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>8feed203-4026-4161-9c4c-4abc84536126</dcsset:userSettingID>
				</dcscor:item>
			</dcsset:dataParameters>
			<dcsset:order>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee.Code</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Compensation</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
			</dcsset:order>
			<dcsset:outputParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>AppearanceTemplate</dcscor:parameter>
					<dcscor:value xsi:type="xs:string">Reports</dcscor:value>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Title</dcscor:parameter>
					<dcscor:value xsi:type="v8:LocalStringType">
						<v8:item>
							<v8:lang>en</v8:lang>
							<v8:content>Pay Advances</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Авансы по ЗП</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ro</v8:lang>
							<v8:content>Avansuri salariale</v8:content>
						</v8:item>
					</dcscor:value>
				</dcscor:item>
			</dcsset:outputParameters>
			<dcsset:item xsi:type="dcsset:StructureItemGroup">
				<dcsset:order>
					<dcsset:item xsi:type="dcsset:OrderItemAuto"/>
				</dcsset:order>
				<dcsset:selection>
					<dcsset:item xsi:type="dcsset:SelectedItemAuto"/>
				</dcsset:selection>
			</dcsset:item>
		</dcsset:settings>
	</settingsVariant>
</DataCompositionSchema>